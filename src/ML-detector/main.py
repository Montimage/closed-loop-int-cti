#!/usr/bin/env python3
# coding=utf-8



import pandas as pd
import numpy as np
import redis
from datetime import datetime
import os, time, csv, sys, json

import _ml_detection as ml
import _convert_data as hn
import _cti as vl

# time window to group INT reports
TIME_WINDOW=0.33000 #33 milliseconds

#topic in which INT-collector publish its reports to
REDIS_TOPIC="report"

# print log with current timestamp
def log(msg):
    print("{0}: {1}".format(datetime.now(), msg))


def format_alert(ip, ts):
    # format of security report: https://github.com/Montimage/mmt-probe/blob/master/docs/data-format.md#security-reports
    alert = [
    10, #report ID
    12, #probe ID
    '"eth0"', #dummy nic
    ts,
    4,
    '"detected"',
    '"attack"',
    '"Machine learning detects an abnormal traffic in the network"',
    json.dumps({"event_1":{"timestamp": ts,"attributes":[["ip.src", ip]]}}) ]
    
    alert = ','.join(str(e) for e in alert)
    return alert

def ml_detection( data ):
    #print( Data )
    verdict = ml.detector( data )
    #print( verdict )
    
    result = []
    for i in range(len(verdict)):
        #detect nothing: everything ok
        if verdict[i] == 0:
            continue
        msg = data[i]
        # print(msg)

        # check whether the source IP in a blacklist of our CTI
        if not vl.is_ipv_in_blacklist( msg["src-ip"] ):
            continue

        alert = format_alert( msg["src-ip"], msg["timestamp"] )
        result.append( alert )
        #pub_sub.publish(REDIS_CHANNEL, alert)
    return result

# load list of IPs addresses into an array
def load_ips():
    result = []
    with open("./src-ips.txt") as f:
        while True:
            line = f.readline()
            if not line:
                break
            #strip spaces
            line = line.strip()
            if line.startswith("#"):
                continue
            result.append( line )
    return result

# store the list of IPs
#SRC_IPS = load_ips()

def process_message( raw_msg ):
    #log( raw_msg )
    msg = hn.convert_message( raw_msg )
    #log( msg )
    # not correct format
    if not msg:
        #log("ignored message: {0}".format( raw_msg ))
        return False

    # verify only traffic comming from the give set of source IPs
    #if not msg["src-ip"] in SRC_IPS:
    #    return False

    #print(msg)
    # append the message into the current time window
    data = hn.get_synthesis_msg( msg, TIME_WINDOW )

    #the window is not full
    if len(data) == 0:
        return []

    return ml_detection( data )

############# Main processing ##################

# 1. either processing a .csv file which is generated by INT collector
if len(sys.argv) == 2:
    log("processing file {0}".format( sys.argv[1] ))
    with open( sys.argv[1], 'r') as f:
        while True:
            # Get next line from file
            line = f.readline()

            # if line is empty => end of file is reached
            if not line:
                break
            alerts = process_message( line )
            if alerts and len( alerts ):
                log( alerts )
    sys.exit(1)


REDIS_HOST = "127.0.0.1"
REDIS_PORT = 6379

# 2. or subcribe to a redis topic to listen to messages generated by INT collector
if len(sys.argv) == 3:
    print("\nUsage: python3 {0} redis-host redis-port".format( sys.argv[0]))
    print("   Ex: python3 {0} 127.0.0.1 6379\n".format( sys.argv[0]))

    REDIS_HOST = sys.argv[1]
    REDIS_PORT = sys.argv[2]

# statistic info
NB_ARRIVED_MSG   = 0
NB_PROCESSED_MSG = 0
NB_ALERTS        = 0
LAST_PRINT_TS    = -1

try:
    r = redis.Redis(host=REDIS_HOST, port=REDIS_PORT, db=0)
    pub_sub = r.pubsub()
    pub_sub.subscribe( REDIS_TOPIC ) #subscribe to "report" topic in which INT-collector publish its reports to
    log("subscribed to 'report' topic")
    log("listening to new message ...")
    while True:
       message = pub_sub.get_message()
       if message:
           msg = message["data"]
           if type(msg) == int:
               continue
           msg = msg.decode()
           alerts = process_message( msg )
           if not alerts == False:
                NB_PROCESSED_MSG += 1
                NB_ALERTS += len(alerts)

                # publish alerts to redis topic
                for alert in alerts:
                    r.publish( REDIS_TOPIC, alert )
          
           NB_ARRIVED_MSG += 1
       else:
           time.sleep(0.01)  # be nice to the system :)

       now = datetime.now().second
       # print a message each second
       if now != LAST_PRINT_TS:
          LAST_PRINT_TS = now
          log( "got {0} messages, retained {1} msg, generated {2} alerts".format(NB_ARRIVED_MSG, NB_PROCESSED_MSG, NB_ALERTS) )
          NB_PROCESSED_MSG = 0
          NB_ARRIVED_MSG = 0
          NB_ALERTS = 0

except redis.exceptions.ConnectionError as ex: 
    log("cannot connect to Redis: {0}".format( ex))
except KeyboardInterrupt:
    # User interrupt the program with ctrl+c
    print("bye!")
    sys.exit()
